plugins {
  id 'net.neoforged.moddev' version '2.0.82' apply false
  id 'fabric-loom' version '1.10-SNAPSHOT' apply false
}

subprojects {
  apply plugin: 'java'

  group = maven_group
  version = "$version+$minecraft_version"

  java {
    toolchain.languageVersion = JavaLanguageVersion.of(21)
  }

  repositories {
    mavenCentral()
    maven {
      url = 'https://repo.spongepowered.org/repository/maven-public/'
      content { includeGroup 'org.spongepowered' }
    }
    maven {
      url = 'https://maven.parchmentmc.org/'
      content { includeGroup 'org.parchmentmc.data' }
    }
    maven {
      url = 'https://api.modrinth.com/maven/'
      content { includeGroup 'maven.modrinth' }
    }
  }

  dependencies {
    implementation 'com.google.code.findbugs:jsr305:3.0.2'
  }

  jar {
    from("LICENSE") {
      rename { "${it}_${mod_id}" }
    }
  }

  tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.release = 21
  }

  final def generateModManifests = tasks.register('generateModManifests', ProcessResources) {
    final def expandProps = [
            'version'                : version,
            'group'                  : project.group,
            'minecraft_version'      : minecraft_version,
            'minecraft_version_range': minecraft_version_range,
            'mod_name'               : mod_name,
            'mod_author'             : mod_author,
            'mod_id'                 : mod_id,
            'license'                : license,
            'description'            : project.description,
            'credits'                : credits,
            'issue_tracker'          : issue_tracker,
            'sources'                : sources,
    ]

    inputs.properties expandProps
    expand expandProps

    from 'src/main/templates'
    into 'build/generated/sources/modManifests'
  }

  sourceSets.main.resources.srcDir generateModManifests

  tasks.named('processResources', ProcessResources) {
    dependsOn generateModManifests
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
  }

  tasks.withType(GenerateModuleMetadata).configureEach {
    enabled = false
  }
}
